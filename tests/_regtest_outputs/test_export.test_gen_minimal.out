file mm_ebd53a3f636abf35c32d076c513b2ae3_cfg.json
{
  "bitfields": {},
  "defines": {},
  "enums": {},
  "maps": {
    "map_1": {
      "compressed_records": [
        {
          "compressed_offset": "0",
          "map_offset": 0,
          "name": "record_1",
          "read_permission": [
            0
          ],
          "readable": false,
          "resolved_access": 0,
          "resolved_offset": 0,
          "resolved_read_permission": 0,
          "resolved_total_size": 4,
          "resolved_type": "uint32_t",
          "resolved_type_size": 4,
          "resolved_write_permission": 0,
          "use_bitfields": false,
          "use_enums": false,
          "writable": false,
          "write_permission": [
            0
          ]
        }
      ],
      "records": [
        {
          "map_offset": 0,
          "name": "record_1",
          "read_permission": [
            0
          ],
          "readable": false,
          "resolved_access": 0,
          "resolved_offset": 0,
          "resolved_read_permission": 0,
          "resolved_total_size": 4,
          "resolved_type": "uint32_t",
          "resolved_type_size": 4,
          "resolved_write_permission": 0,
          "use_bitfields": false,
          "use_enums": false,
          "writable": false,
          "write_permission": [
            0
          ]
        }
      ],
      "type": "type_1"
    }
  },
  "metadata": {
    "app_name": "minimal",
    "full_hash": "ebd53a3f636abf35c32d076c513b2ae3",
    "fw_hash": "ad00a6ae13fdcb8dcc2fed692ad4548f",
    "major_version": 0,
    "minor_version": 0,
    "patch_version": 0,
    "resolved_permission_users": {},
    "sw_hash": "ad00a6ae13fdcb8dcc2fed692ad4548f",
    "version": "0.0.0"
  },
  "typedefs": [
    {
      "type_1": {
        "deps": [
          "type_1"
        ],
        "elements": [
          {
            "name": "record_1",
            "resolved_offset": 0,
            "resolved_total_size": 4,
            "resolved_type": "uint32_t",
            "resolved_type_size": 4
          }
        ],
        "read_permission": 0,
        "resolved_total_size": 4,
        "use_bitfields": false,
        "use_enums": false,
        "write_permission": 0
      }
    }
  ]
}
file mm_input_cfg.yaml
generated_maps:
  map_1:
    type: type_1
metadata:
  app_name: minimal
typedefs:
  type_1:
    elements:
    - record_1

file mm_minimal_map_1_ebd53a3f636abf35c32d076c513b2ae3.csv
map_offset,name,read_permission,readable,resolved_access,resolved_offset,resolved_read_permission,resolved_total_size,resolved_type,resolved_type_size,resolved_write_permission,use_bitfields,use_enums,writable,write_permission
0,record_1,[0],False,0,0,0,4,uint32_t,4,0,False,False,False,[0]

file mm_minimal_map_1_0_0_0.csv
name,offset,total_size,type_size,type,description,access,array_size,bit_offset,bits,default,flag,max,min
record_1,0,4,4,,,0,,,,,,,

file mm_minimal_map_1_compressed_0_0_0.csv
name,compressed_offset,resolved_total_size,resolved_type_size,resolved_type,description,map_offset,read_permission,readable,resolved_access,resolved_offset,resolved_read_permission,resolved_write_permission,use_bitfields,use_enums,writable,write_permission
record_1,0,4,4,uint32_t,,0,[0],False,0,0,0,0,False,False,False,[0]

file mm_typedefs.h
/**
 ******************************************************************************
 * @addtogroup typedef_mmm
 * @{
 * @file      mm_typedefs.h
 * @version   0.0.0
 ******************************************************************************
 */
#ifndef MM_TYPEDEFS_H
#define MM_TYPEDEFS_H

#ifdef __cplusplus
extern "C"
{
#endif

/* includes ******************************************************************/
#include "mm_typedefs_map_1.h"

#ifdef __cplusplus
}
#endif

#endif /* MM_TYPEDEFS_H */
/** @} **/
file mm_typedefs_type_1.h
/**
 ******************************************************************************
 * @addtogroup typedefs_mmm
 * @{
 * @file      mm_typedefs_type_1.h
 * @version   0.0.0
 ******************************************************************************
 */
#ifndef MM_TYPEDEFS_TYPE_1_H
#define MM_TYPEDEFS_TYPE_1_H

#ifdef __cplusplus
extern "C"
{
#endif

/* includes ******************************************************************/
#include <stdint.h>

#include "mm_cc.h"
#include "mm_typedefs_type_1.h"

/* tyepdefs ***************************************************************/
MM_PACKED_START
typedef union {
    struct {
        uint32_t record_1;
    };
    uint8_t data[4]; /**< Array for padding */
} type_1;
MM_PACKED_END

#ifdef __cplusplus
}
#endif

#endif /* MM_TYPEDEFS_TYPE_1_H */
/** @} **/
file mm_typedefs_map_1.h
/**
 ******************************************************************************
 * @addtogroup map_1_mmm
 * @{
 * @file      mm_typedefs_map_1.h
 * @version   0.0.0
 ******************************************************************************
 */
#ifndef MM_TYPEDEFS_MAP_1_H
#define MM_TYPEDEFS_MAP_1_H

#ifdef __cplusplus
extern "C"
{
#endif

/* includes ******************************************************************/
#include "mm_cc.h"
#include "mm_typedefs_type_1.h"
#include "mm_typedefs_type_1.h"

/* tyepdefs ***************************************************************/
typedef type_1 map_1;

#ifdef __cplusplus
}
#endif

#endif /* MM_TYPEDEFS_MAP_1_H */
/** @} **/
file mm_cc.h
/**
 ******************************************************************************
 * @addtogroup cc_mmm
 * @{
 * @file      mm_cc.h
 * @version   0.0.0
 ******************************************************************************
 */
#ifndef MM_CC_H
#define MM_CC_H

#ifdef __cplusplus
extern "C"
{
#endif

#ifdef __linux__
   #include <endian.h>
#else
   #include <machine/endian.h>
#endif

#define MM_PACKED_START _Pragma ("pack(1)")
#define MM_PACKED_END   _Pragma ("pack()")
#define MM_PACKED       __attribute__((packed))
#define MM_ALIGNED(n)   __attribute__((aligned (n)))

#if BYTE_ORDER == BIG_ENDIAN
//#error The mmm only supports little endian
#endif

#ifdef __cplusplus
}
#endif

#endif /* MM_CC_H */
/** @} **/
file mm_meta.h
/**
 ******************************************************************************
 * @addtogroup meta_mmm
 * @{
 * @file      mm_meta.h
 * @version   0.0.0
 ******************************************************************************
 */
#ifndef MM_META_H
#define MM_META_H

#ifdef __cplusplus
extern "C"
{
#endif

/* defines *******************************************************************/

#define MM_APP_NAME "minimal" /** Application name **/

#define MM_VERSION_STR "0.0.0" /** Version string for the memory map interface **/
#define MM_MAJOR_VERSION 0 /** Major version of the memory map interface **/
#define MM_MINOR_VERSION 0 /** Minor version of the memory map interface **/
#define MM_PATCH_VERSION 0 /** Patch version of the memory map interface **/


#define MM_FW_HASH  "ad00a6ae13fdcb8dcc2fed692ad4548f" /** Hash for what effects the firmware */
#define MM_HASH  "ebd53a3f636abf35c32d076c513b2ae3" /** Hash for the whole generated map */

#ifdef __cplusplus
}
#endif

#endif /* MM_META_H */
/** @} **/
