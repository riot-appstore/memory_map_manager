name: CMake Build Matrix

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

env:
  CMAKE_VERSION: 3.23.0

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        apps:
          - examples/minimal

    steps:
    - uses: actions/checkout@v2

    - name: Download  CMake
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
        set(cmake_suffix "linux-x86_64.tar.gz")
        set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")
        execute_process(
          COMMAND chmod +x ${cmake_dir}/cmake
        )
    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} gcc)
        set(ENV{CXX} g++)
        set(path_separator ":")
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        execute_process(
          COMMAND cmake
            -S .
            -B build
          WORKING_DIRECTORY ${{ matrix.apps }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
    - name: Build
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake --build build
          WORKING_DIRECTORY ${{ matrix.apps }}
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed")
        endif()
    - name: Run tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)
        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")
        execute_process(
          COMMAND ctest -j ${N}
          WORKING_DIRECTORY ${{ matrix.apps }}/build
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
          string(REPLACE "\n" "%0A" test_results "${test_results}")
          message("::error::${test_results}")
          message(FATAL_ERROR "Running tests failed!")
        endif()
